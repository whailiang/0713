/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p runtime_interface.h: ../org.kylin.runtime.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef RUNTIME_INTERFACE_H
#define RUNTIME_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylin.runtime.interface
 */
class ComKylinRuntimeInterfaceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylin.runtime.interface"; }

public:
    ComKylinRuntimeInterfaceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComKylinRuntimeInterfaceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> daemon_ready(const QVariantList &app_cmd_andapp_platform)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(app_cmd_andapp_platform);
        return asyncCallWithArgumentList(QStringLiteral("daemon_ready"), argumentList);
    }

    inline QDBusPendingReply<> exec_command(const QVariantList &app_info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(app_info);
        return asyncCallWithArgumentList(QStringLiteral("exec_command"), argumentList);
    }

    inline QDBusPendingReply<> set_platform_app_status(const QVariantList &platform_status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(platform_status);
        return asyncCallWithArgumentList(QStringLiteral("set_platform_app_status"), argumentList);
    }

    inline QDBusPendingReply<> test()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("test"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void app_start(const QString &app_info);
    void kill_app(const QString &app_info);
    void run_app_reply(const QString &reply);
};

namespace com {
  namespace kylin {
    namespace runtime {
      typedef ::ComKylinRuntimeInterfaceInterface interface;
    }
  }
}
#endif
